
==== ./endpoints/daily_goals.py ====

from includes import *

router = APIRouter()

@router.post("/add-daily-goal")
def add_daily_goal(user_id: str, date: str, content: str, deadline_hour = ""):
	conn = None
	cur = None
	try:
		conn = connect_to_db()
		cur = conn.cursor()
		cur.execute(
			"INSERT INTO daily_goals (user_id, date, deadline_hour, content) VALUES (%s, %s, %s, %s) RETURNING id",
			(user_id, date, deadline_hour, content)	 
		)
		goal_id = cur.fetchone()[0]
		conn.commit()
		return {
			"success": True,
			"goal_id": goal_id,
			"message": f"daily goal for user id: {user_id} added"
		}
	except Exception as e:
		return {
			"success": False,
			"message": f"Failed to add daily goal to user id: {user_id}"
		}
	finally:
		if cur:
			cur.close()
		if conn:
			conn.close()

@router.post("/delete-daily-goal")
def delete_daily_goal(user_id: int, goal_id: int):
	conn = None
	cur = None
	try:
		conn = connect_to_db()
		cur = conn.cursor()
		cur.execute(
			"DELETE FROM daily_goals WHERE id = %s AND user_id = %s RETURNING id",
			(goal_id, user_id)
		)
		deleted = cur.fetchone()
		if not deleted:
			return {
				"success": False,
				"message": f"Goal not found"
			}
		conn.commit()
		return {
			"success": True,
			"goal_id": deleted[0],
			"message": f"goal {deleted[0]} from user_id: {user_id} deleted"
		}
	except Exception as e:
		return {
			"success": False,
			"message": f"Error: {str(e)}"
		}
	finally:
		if cur:
			cur.close()
		if conn:
			conn.close()
		
@router.post("/complete-daily-goal")
def complete_daily_goal(user_id: int, goal_id: int):
	conn = None
	cur = None
	try:
		conn = connect_to_db()
		cur = conn.cursor()
		cur.execute(
			"UPDATE daily_goals SET is_done = TRUE WHERE id = %s AND user_id = %s RETURNING id",
			(goal_id, user_id)
		)
		updated = cur.fetchone()
		if not updated:
			return {
				"success": False,
				"message": f"No goal updated"
			}
		conn.commit()
		return {
			"success": True,
			"goal_id": updated[0],
			"message": f"goal {updated[0]} marked as completed"
		}
	except Exception as e:
		return {
			"success": False,
			"message": f"Error: {str(e)}"
		}
	finally:
		if cur:
			cur.close()
		if conn:
			conn.close()

@router.post("/uncomplete-daily-goal")
def uncomplete_daily_goal(user_id: int, goal_id: int):
	conn = None
	cur = None
	try:
		conn = connect_to_db()
		cur = conn.cursor()
		cur.execute(
			"UPDATE daily_goals SET is_done = FALSE WHERE id = %s AND user_id = %s RETURNING id",
			(goal_id, user_id)
		)
		updated = cur.fetchone()
		if not updated:
			return {
				"success": False,
				"message": f"No goal updated"
			}
		conn.commit()
		return {
			"success": True,
			"goal_id": updated[0],
			"message": f"goal {updated[0]} marked as uncompleted"
		}
	except Exception as e:
		return {
			"success": False,
			"message": f"Error: {str(e)}"
		}
	finally:
		if cur:
			cur.close()
		if conn:
			conn.close()

@router.post("/set-or-change-deadline-hour-for-daily-goal")
def set_or_change_deadline_hour(user_id: int, goal_id: int, deadline_hour: str):
	cur = None
	conn = None
	try:
		conn = connect_to_db()
		cur = conn.cursor()
		cur.execute(
			"UPDATE daily_goals SET deadline_hour = %s WHERE id = %s AND user_id = %s RETURNING id",
			(deadline_hour, goal_id, user_id)
		)
		updated = cur.fetchone()
		if not updated:
			return {
				"success": False,
				"message": f"cannot set or change deadline_hour"
			}
		conn.commit()
		return {
			"success": True,
			"goal_id": goal_id,
			"new deadline hour": deadline_hour,
			"message": f"deadline hour setup"
		}
	except Exception as e:
		return {
			"success": False,
			"message": f"Error: {str(e)}"
		}
	finally:
		if cur:
			cur.close()
		if conn:
			conn.close()

@router.post("/delete-deadline-hour-for-daily-goal")
def delete_deadline_hour(user_id: int, goal_id: int):
	cur = None
	conn = None
	try:
		conn = connect_to_db()
		cur = conn.cursor()
		cur.execute(
			"UPDATE daily_goals SET deadline_hour = %s WHERE id = %s AND user_id = %s RETURNING id",
			("", goal_id, user_id)
		)
		updated = cur.fetchone()
		if not updated:
			return {
				"success": False,
				"message": f"cannot set or change deadline_hour"
			}
		conn.commit()
		return {
			"success": True,
			"goal_id": goal_id,
			"message": f"deadline hour deleted"
		}
	except Exception as e:
		return {
			"success": False,
			"message": f"Error: {str(e)}"
		}
	finally:
		if cur:
			cur.close()
		if conn:
			conn.close()

@router.get("/get-daily-goals")
def get_daily_goals(user_id: int, date: str):
	conn = None
	cur = None
	try:
		conn = connect_to_db()
		cur = conn.cursor()
		cur.execute(
			"SELECT * FROM daily_goals WHERE user_id = %s AND date = %s",
			(user_id, date)
		)
		return fetch_all_as_dict(cur)
	except Exception as e:
		return {
			"success": False,
			"message": f"Wrong user_id or date"
		}
	finally:
		if cur:
			cur.close()
		if conn:
			conn.close()

@router.get("/get-all-goals")
def get_all_goals(user_id: int):
	conn = None
	cur = None
	try:
		conn = connect_to_db()
		cur = conn.cursor()
		cur.execute(
			"SELECT * FROM daily_goals WHERE user_id = %s",
			(user_id,)
		)
		return fetch_all_as_dict(cur)
	except Exception as e:
		return {
			"success": False,
			"message": f"Failed to get all goals from user_id: {user_id}"
		}
	finally:
		if cur:
			cur.close()
		if conn:
			conn.close()
==== ./endpoints/users.py ====

from includes import *

router = APIRouter()

@router.post("/add-user")
def add_user(data: User):
	conn = connect_to_db()
	cur = conn.cursor()
	cur.execute("SELECT * FROM users WHERE user_name = %s", (data.name,))
	if cur.fetchall():
		return {"error:" f"user {data.name} already exist"}
	cur.execute("INSERT INTO users (user_name) VALUES (%s)", (data.name,))
	conn.commit()
	res = {"status": "success"}
	cur.close()
	conn.close()
	return res

@router.get("/get-all-users")
def get_all_users():
	conn = connect_to_db()
	cur = conn.cursor()
	try:
		cur.execute("SELECT user_id, user_name FROM users")
		users = fetch_all_as_dict(cur)
		return users
	finally:
		cur.close()
		conn.close()
==== ./database.py ====

import os
from pathlib import Path
from dotenv import load_dotenv
import psycopg2

env_path = Path(__file__).resolve().parent / ".env"
load_dotenv(dotenv_path=env_path, override=True)

db_host = os.getenv("DB_HOST")
db_port = os.getenv("DB_PORT")
db_name = os.getenv("DB_NAME")
db_user = os.getenv("DB_USER")
db_password = os.getenv("DB_PASSWORD")

def connect_to_db():
	try:
		conn = psycopg2.connect(
			host=db_host,
			port=db_port,
			database=db_name,
			user=db_user,
			password=db_password
			)
		return conn
	except Exception as e:
		print("‚ùå DB ERROR:", e)
		raise
==== ./includes.py ====

from fastapi import FastAPI, APIRouter
from database import db_host, db_name, db_password, db_port, db_user, connect_to_db
import psycopg2
from dotenv import load_dotenv
import os
from pathlib import Path
from pydantic import BaseModel
from datetime import datetime, date
from utils import *

app = FastAPI()

class User(BaseModel):
	name: str
==== ./utils.py ====

from includes import *

def fetch_all_as_dict(cur):
	columns = []
	for description in cur.description:
		column_name = description[0]
		columns.append(column_name)
	results = []
	for row in cur.fetchall():
		row_dict = dict(zip(columns, row))
		results.append(row_dict)
	return results
==== ./main.py ====

from includes import *
from routers import daily_goals, users

app.include_router(daily_goals.router)
app.include_router(users.router)
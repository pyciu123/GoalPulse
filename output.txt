import React, { useEffect, useState } from 'react';
import { GestureHandlerRootView } from 'react-native-gesture-handler';
import { NavigationContainer } from '@react-navigation/native';
import { createNativeStackNavigator } from '@react-navigation/native-stack';
import AsyncStorage from '@react-native-async-storage/async-storage';

import HomeScreen from './screens/HomeScreen';
import DailyGoalsScreen from './screens/DailyGoalsScreen';
import WeeklyGoalsScreen from './screens/WeeklyGoalsScreen';
import MonthlyGoalsScreen from './screens/MonthlyGoalsScreen';
import WeeklySummaryScreen from './screens/WeeklySummaryScreen';
import WelcomeScreen from './screens/WelcomeScreen';

const Stack = createNativeStackNavigator();

export default function App() {
  const [isReady, setIsReady] = useState(false);
  const [hasName, setHasName] = useState(false);

  useEffect(() => {
    const checkIfNameExists = async () => {
      const storedName = await AsyncStorage.getItem('userName');
      setHasName(!!storedName);
      setIsReady(true);
    };

    checkIfNameExists();
  }, []);

  if (!isReady) return null;

  return (
    <GestureHandlerRootView style={{ flex: 1 }}>
      <NavigationContainer>
        <Stack.Navigator initialRouteName={hasName ? 'Home' : 'Welcome'}>
          <Stack.Screen
            name="Welcome"
            component={WelcomeScreen}
            options={{ headerShown: false }}
          />
          <Stack.Screen name="Home" component={HomeScreen} options={{ title: 'GoalPulse' }} />
          <Stack.Screen name="DailyGoals" component={DailyGoalsScreen} />
          <Stack.Screen name="WeeklyGoals" component={WeeklyGoalsScreen} />
          <Stack.Screen name="MonthlyGoals" component={MonthlyGoalsScreen} />
          <Stack.Screen name="WeeklySummary" component={WeeklySummaryScreen} />
        </Stack.Navigator>
      </NavigationContainer>
    </GestureHandlerRootView>
  );
}import React, { useState } from 'react';
import {
  View,
  Text,
  TextInput,
  Button,
  FlatList,
  StyleSheet,
  TouchableOpacity,
} from 'react-native';
import { Swipeable } from 'react-native-gesture-handler';

export default function DailyGoalsScreen() {
  const [goals, setGoals] = useState([
    { id: '1', text: 'ZrÃ³b trening', completed: false },
    { id: '2', text: 'Przeczytaj 10 stron', completed: false },
  ]);
  const [newGoal, setNewGoal] = useState('');

  const addGoal = () => {
    if (newGoal.trim() === '') return;
    const newItem = {
      id: Date.now().toString(),
      text: newGoal.trim(),
      completed: false,
    };
    setGoals([...goals, newItem]);
    setNewGoal('');
  };

  const toggleGoal = (id) => {
    setGoals(goals.map(goal =>
      goal.id === id ? { ...goal, completed: !goal.completed } : goal
    ));
  };

  const deleteGoal = (id) => {
    setGoals(goals.filter(goal => goal.id !== id));
  };

  const renderRightActions = (id) => (
    <TouchableOpacity style={styles.deleteButton} onPress={() => deleteGoal(id)}>
      <Text style={styles.deleteText}>UsuÅ„</Text>
    </TouchableOpacity>
  );

  return (
    <View style={styles.container}>
      <Text style={styles.title}>Twoje cele na dziÅ›</Text>
      <Text style={styles.subtitle}>NaciÅ›nij, aby oznaczyÄ‡ cel jako ukoÅ„czony</Text>

      <TextInput
        placeholder="Wpisz nowy cel"
        style={styles.input}
        value={newGoal}
        onChangeText={setNewGoal}
      />
      <Button title="Dodaj cel" onPress={addGoal} />

      <FlatList
        data={goals}
        keyExtractor={item => item.id}
        renderItem={({ item }) => (
          <Swipeable renderRightActions={() => renderRightActions(item.id)}>
            <TouchableOpacity onPress={() => toggleGoal(item.id)} style={styles.goal}>
              <Text style={item.completed ? styles.completedText : styles.goalText}>
                {item.completed ? 'âœ” ' : ''}{item.text}
              </Text>
            </TouchableOpacity>
          </Swipeable>
        )}
      />
    </View>
  );
}

const styles = StyleSheet.create({
  container: { flex: 1, padding: 20, gap: 20 },
  title: { fontSize: 24, marginBottom: 10 },
  subtitle: { fontSize: 14, color: 'gray', marginBottom: 10 },
  input: {
    borderWidth: 1,
    borderColor: '#ccc',
    padding: 10,
    borderRadius: 5,
    marginBottom: 10,
  },
  goal: {
    backgroundColor: '#fff',
    padding: 15,
    borderBottomColor: '#ccc',
    borderBottomWidth: 1,
  },
  goalText: { fontSize: 16 },
  completedText: {
    fontSize: 16,
    textDecorationLine: 'line-through',
    color: '#6B7280',
  },
  deleteButton: {
    backgroundColor: '#EF4444',
    justifyContent: 'center',
    alignItems: 'flex-end',
    paddingHorizontal: 20,
  },
  deleteText: {
    color: '#fff',
    fontWeight: 'bold',
  },
});import React, { useState, useEffect } from 'react';
import { View, Text, Button, StyleSheet } from 'react-native';
import { Audio } from 'expo-av';
import AsyncStorage from '@react-native-async-storage/async-storage';

export default function HomeScreen({ navigation }) {
  const [recording, setRecording] = useState(null);
  const [sound, setSound] = useState(null);
  const [recordedURI, setRecordedURI] = useState(null);
  const [userName, setUserName] = useState('');

  useEffect(() => {
    (async () => {
      const { status } = await Audio.requestPermissionsAsync();
      if (!status.granted) {
        alert('Brak uprawnieÅ„ do mikrofonu');
      }

      const name = await AsyncStorage.getItem('userName');
      if (name) setUserName(name);
    })();
  }, []);

  const startRecording = async () => {
    try {
      await Audio.setAudioModeAsync({
        allowsRecordingIOS: true,
        playsInSilentModeIOS: true,
      });

      const { recording } = await Audio.Recording.createAsync(
        Audio.RECORDING_OPTIONS_PRESET_HIGH_QUALITY
      );
      setRecording(recording);
    } catch (err) {
      console.error('BÅ‚Ä…d nagrywania:', err);
    }
  };

  const stopRecording = async () => {
    try {
      await recording.stopAndUnloadAsync();
      const uri = recording.getURI();
      setRecordedURI(uri);
      setRecording(null);
    } catch (err) {
      console.error('BÅ‚Ä…d zatrzymania:', err);
    }
  };

  const playRecording = async () => {
    try {
      if (sound) {
        await sound.unloadAsync();
        setSound(null);
      }
      const { sound: newSound } = await Audio.Sound.createAsync({ uri: recordedURI });
      setSound(newSound);
      await newSound.playAsync();
    } catch (err) {
      console.error('BÅ‚Ä…d odtwarzania:', err);
    }
  };

  return (
    <View style={styles.container}>
      <Text style={styles.title}>GoalPulse</Text>
      <Text style={styles.greeting}>CzeÅ›Ä‡, {userName} ðŸ‘‹</Text>

      <Button title="Daily Goals" onPress={() => navigation.navigate('DailyGoals')} />
      <Button title="Weekly Goals" onPress={() => navigation.navigate('WeeklyGoals')} />
      <Button title="Monthly Goals" onPress={() => navigation.navigate('MonthlyGoals')} />

      <View style={styles.recordingSection}>
        <Text style={styles.description}>
          Podziel siÄ™ swoim dniem, a AI na koniec tygodnia przeanalizuje TwÃ³j tydzieÅ„.
        </Text>

        <Button
          title={recording ? 'Zatrzymaj nagrywanie' : 'Rozpocznij nagrywanie'}
          onPress={recording ? stopRecording : startRecording}
        />

        {recordedURI && (
          <View style={styles.spaced}>
            <Button title="OdtwÃ³rz nagranie" onPress={playRecording} />
          </View>
        )}
        <Button title="Weekly Summary" onPress={() => navigation.navigate('WeeklySummary')} />
      </View>

      <View style={{ marginTop: 30 }}>
        <Text style={{ textAlign: 'center', fontSize: 16 }}>
          Wykonano 3 z 5 celÃ³w w tym tygodniu
        </Text>
        <Text style={{ textAlign: 'center', fontSize: 16 }}>
          Åšrednia dzienna realizacja: 60%
        </Text>
      </View>
    </View>
  );
}

const styles = StyleSheet.create({
  container: { flex: 1, justifyContent: 'center', padding: 20, gap: 20 },
  title: { fontSize: 32, textAlign: 'center', marginBottom: 10 },
  greeting: { fontSize: 20, textAlign: 'center', marginBottom: 20 },
  description: {
    fontSize: 16,
    marginTop: 40,
    marginBottom: 20,
    textAlign: 'center',
  },
  spaced: {
    marginTop: 20,
    gap: 10,
  },
  recordingSection: {
    marginTop: 40,
  },
});import React, { useState } from 'react';
import {
  View,
  Text,
  TextInput,
  Button,
  FlatList,
  StyleSheet,
  TouchableOpacity,
} from 'react-native';
import { Swipeable } from 'react-native-gesture-handler';

export default function DailyGoalsScreen() {
  const [goals, setGoals] = useState([
    { id: '1', text: 'ZrÃ³b trening', completed: false },
    { id: '2', text: 'Przeczytaj 10 stron', completed: false },
  ]);
  const [newGoal, setNewGoal] = useState('');

  const addGoal = () => {
    if (newGoal.trim() === '') return;
    const newItem = {
      id: Date.now().toString(),
      text: newGoal.trim(),
      completed: false,
    };
    setGoals([...goals, newItem]);
    setNewGoal('');
  };

  const toggleGoal = (id) => {
    setGoals(goals.map(goal =>
      goal.id === id ? { ...goal, completed: !goal.completed } : goal
    ));
  };

  const deleteGoal = (id) => {
    setGoals(goals.filter(goal => goal.id !== id));
  };

  const renderRightActions = (id) => (
    <TouchableOpacity style={styles.deleteButton} onPress={() => deleteGoal(id)}>
      <Text style={styles.deleteText}>UsuÅ„</Text>
    </TouchableOpacity>
  );

  return (
    <View style={styles.container}>
      <Text style={styles.title}>Twoje cele na ten miesiÄ…c</Text>
      <Text style={styles.subtitle}>NaciÅ›nij, aby oznaczyÄ‡ cel jako ukoÅ„czony</Text>

      <TextInput
        placeholder="Wpisz nowy cel"
        style={styles.input}
        value={newGoal}
        onChangeText={setNewGoal}
      />
      <Button title="Dodaj cel" onPress={addGoal} />

      <FlatList
        data={goals}
        keyExtractor={item => item.id}
        renderItem={({ item }) => (
          <Swipeable renderRightActions={() => renderRightActions(item.id)}>
            <TouchableOpacity onPress={() => toggleGoal(item.id)} style={styles.goal}>
              <Text style={item.completed ? styles.completedText : styles.goalText}>
                {item.completed ? 'âœ” ' : ''}{item.text}
              </Text>
            </TouchableOpacity>
          </Swipeable>
        )}
      />
    </View>
  );
}

const styles = StyleSheet.create({
  container: { flex: 1, padding: 20, gap: 20 },
  title: { fontSize: 24, marginBottom: 10 },
  subtitle: { fontSize: 14, color: 'gray', marginBottom: 10 },
  input: {
    borderWidth: 1,
    borderColor: '#ccc',
    padding: 10,
    borderRadius: 5,
    marginBottom: 10,
  },
  goal: {
    backgroundColor: '#fff',
    padding: 15,
    borderBottomColor: '#ccc',
    borderBottomWidth: 1,
  },
  goalText: { fontSize: 16 },
  completedText: {
    fontSize: 16,
    textDecorationLine: 'line-through',
    color: '#6B7280',
  },
  deleteButton: {
    backgroundColor: '#EF4444',
    justifyContent: 'center',
    alignItems: 'flex-end',
    paddingHorizontal: 20,
  },
  deleteText: {
    color: '#fff',
    fontWeight: 'bold',
  },
});import React, { useState } from 'react';
import {
  View,
  Text,
  TextInput,
  Button,
  FlatList,
  StyleSheet,
  TouchableOpacity,
} from 'react-native';
import { Swipeable } from 'react-native-gesture-handler';

export default function DailyGoalsScreen() {
  const [goals, setGoals] = useState([
    { id: '1', text: 'ZrÃ³b trening', completed: false },
    { id: '2', text: 'Przeczytaj 10 stron', completed: false },
  ]);
  const [newGoal, setNewGoal] = useState('');

  const addGoal = () => {
    if (newGoal.trim() === '') return;
    const newItem = {
      id: Date.now().toString(),
      text: newGoal.trim(),
      completed: false,
    };
    setGoals([...goals, newItem]);
    setNewGoal('');
  };

  const toggleGoal = (id) => {
    setGoals(goals.map(goal =>
      goal.id === id ? { ...goal, completed: !goal.completed } : goal
    ));
  };

  const deleteGoal = (id) => {
    setGoals(goals.filter(goal => goal.id !== id));
  };

  const renderRightActions = (id) => (
    <TouchableOpacity style={styles.deleteButton} onPress={() => deleteGoal(id)}>
      <Text style={styles.deleteText}>UsuÅ„</Text>
    </TouchableOpacity>
  );

  return (
    <View style={styles.container}>
      <Text style={styles.title}>Twoje cele na ten tydzieÅ„</Text>
      <Text style={styles.subtitle}>NaciÅ›nij, aby oznaczyÄ‡ cel jako ukoÅ„czony</Text>

      <TextInput
        placeholder="Wpisz nowy cel"
        style={styles.input}
        value={newGoal}
        onChangeText={setNewGoal}
      />
      <Button title="Dodaj cel" onPress={addGoal} />

      <FlatList
        data={goals}
        keyExtractor={item => item.id}
        renderItem={({ item }) => (
          <Swipeable renderRightActions={() => renderRightActions(item.id)}>
            <TouchableOpacity onPress={() => toggleGoal(item.id)} style={styles.goal}>
              <Text style={item.completed ? styles.completedText : styles.goalText}>
                {item.completed ? 'âœ” ' : ''}{item.text}
              </Text>
            </TouchableOpacity>
          </Swipeable>
        )}
      />
    </View>
  );
}

const styles = StyleSheet.create({
  container: { flex: 1, padding: 20, gap: 20 },
  title: { fontSize: 24, marginBottom: 10 },
  subtitle: { fontSize: 14, color: 'gray', marginBottom: 10 },
  input: {
    borderWidth: 1,
    borderColor: '#ccc',
    padding: 10,
    borderRadius: 5,
    marginBottom: 10,
  },
  goal: {
    backgroundColor: '#fff',
    padding: 15,
    borderBottomColor: '#ccc',
    borderBottomWidth: 1,
  },
  goalText: { fontSize: 16 },
  completedText: {
    fontSize: 16,
    textDecorationLine: 'line-through',
    color: '#6B7280',
  },
  deleteButton: {
    backgroundColor: '#EF4444',
    justifyContent: 'center',
    alignItems: 'flex-end',
    paddingHorizontal: 20,
  },
  deleteText: {
    color: '#fff',
    fontWeight: 'bold',
  },
});import React from 'react';
import { View, Text, StyleSheet } from 'react-native';

export default function WeeklySummaryScreen() {
  return (
    <View style={styles.container}>
      <Text style={styles.title}>Podsumowanie tygodnia</Text>
      <Text style={styles.text}>
        Tutaj pojawi siÄ™ Twoje tygodniowe podsumowanie wygenerowane przez AI na podstawie nagraÅ„ gÅ‚osowych i wykonanych celÃ³w.
      </Text>
    </View>
  );
}

const styles = StyleSheet.create({
  container: { flex: 1, justifyContent: 'center', padding: 20 },
  title: { fontSize: 24, fontWeight: 'bold', marginBottom: 20, textAlign: 'center' },
  text: { fontSize: 16, textAlign: 'center' },
});import React, { useState } from 'react';
import { View, Text, TextInput, Button, StyleSheet } from 'react-native';
import AsyncStorage from '@react-native-async-storage/async-storage';

export default function WelcomeScreen({ navigation }) {
  const [name, setName] = useState('');

  const handleSave = async () => {
    if (name.trim().length > 0) {
      await AsyncStorage.setItem('userName', name);
      navigation.replace('Home');
    }
  };

  return (
    <View style={styles.container}>
      <Text style={styles.title}>Witaj w GoalPulse!</Text>
      <Text>Podaj swÃ³j nick, aby rozpoczÄ…Ä‡:</Text>
      <TextInput
        style={styles.input}
        placeholder="TwÃ³j nick"
        value={name}
        onChangeText={setName}
      />
      <Button title="ZatwierdÅº" onPress={handleSave} />
    </View>
  );
}

const styles = StyleSheet.create({
  container: { flex: 1, justifyContent: 'center', padding: 20, gap: 20 },
  title: { fontSize: 24, textAlign: 'center', marginBottom: 10 },
  input: {
    borderWidth: 1,
    borderColor: '#ccc',
    padding: 10,
    borderRadius: 8,
  },
});